generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  designation             String?
  email                   String    @unique
  phone                   String?
  walletAddress           String?
  accountName             String?   @default("")
  accountNumber           String?   @default("")
  ifscCode                String    @default("")
  gstNumber               String    @default("")
  companyAddress          String    @default("")
  companyType             String?   @default("")
  companyName             String    @default("")
  msmeCertificate         String?
  oemCertificate          String?
  fy2324Data              String?
  fy2425Data              String?
  glltag                  String?
  international           Boolean   @default(false)
  terms                   Boolean   @default(true)
  isVerified              Boolean   @default(false)
  verificationOTP         String?
  otpExpiry               DateTime?
  gllBalance              Float     @default(0)
  apiKey                  String?   @default("")
  bankName                String?   @default("")
  bankBranch              String?   @default("")
  telegramId              String? // Telegram chat ID for the user
  notificationPreferences Json? // Store notification preferences as JSON
  lastInteraction         DateTime? // Last time user interacted with the bot
  securelinkscount        Int       @default(0) // Track number of secure links generated

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rewards Rewards[] @relation("UserRewards")
  checkins HotelCheckin[] // Relation to hotel check-ins

  // storeConnections  storeConnection[]
  // files             File[]
  // certificates      Certificate[]
  // msmeRegistrations MsmeRegistration[]
  // invoices          Invoice[]
  // msmeReferrals     MsmeReferral[]
  // businessStories   BusinessStory[]
  // products          Product[]
  // socialAccounts    SocialAccount[]

  @@index([apiKey], unique: true, sparse: true)
}

model Creator {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  username    String? @unique
  email       String  @unique
  phone       String?
  nationality String?
  terms       Boolean @default(false)

  // Instagram fields
  instagramId       String?
  instagramUsername String?
  profilePicture    String?

  // Bank and payment fields
  bankBranch    String?
  bankName      String?
  accountNumber String?
  accountName   String?
  ifscCode      String?
  apiKey        String?

  // System fields
  gllBalance Float    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Rewards {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  companyName   String?
  financialYear String?
  documentType  String?
  document      String?
  notes         String?
  userEmail     String? // Store user email for easy reference

  // Store connection fields
  platform  String?
  storeUrl  String?
  storeId   String?
  consented Boolean? @default(false)

  // Certificate fields
  certificateType String?
  certificateUrl  String?
  expiryDate      DateTime?
  issueAuthority  String?

  // MSME Registration fields
  businessName String?
  gstin        String?
  businessType String?
  city         String?
  state        String?
  certificate  String? // Changed from certificateUrl to certificate to match route changes

  // Invoice fields
  invoiceNumber String?
  amount        String?
  dueDate       DateTime?
  customerName  String?
  fileUrls      String[]  @default([])

  // MSME Referral fields
  uciNumber  String?
  msmeUciId  String?
  customerId String?
  status     String? @default("pending")

  // Business Story fields
  imageUrl String?
  story    String?

  // Product fields
  productName     String?
  gstInNumber     String?
  uciCode         String?
  productCategory String?
  productMaterial String?
  originCountry   String?

  // Social Account fields
  socialPlatforms Json? // Store platform data as JSON

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Key relation to User
  userId String? @db.ObjectId
  user   User?   @relation("UserRewards", fields: [userId], references: [id])

  // Define an index on userEmail for faster lookups
  @@index([userEmail])
  @@index([userId])
}

// User Task Completion tracking model
model UserCompletedTask {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userEmail   String // The user's email as unique identifier
  taskId      String // The task identifier (e.g., 'card1', 'card2', etc.)
  completedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Composite unique constraint to prevent duplicate entries
  @@unique([userEmail, taskId], name: "userEmail_taskId")
  // Add index for faster lookups by email
  @@index([userEmail])
}

model GGASeller {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  sellerType      String
  isVerified      Boolean   @default(false)
  verifiedAt      DateTime?
  aadharDoc       String?
  gstDoc          String?
  whatsappNumber  String?
  certificateUrl  String?
  products        Json[] // Each product object will include: {productName, productImage, description, productType, location, sellsOnline, addedAt}
  storeName       String?
  storeTagline    String?
  storeLogo       String?
  socialLinks     Json?
  storeUrl        String?
  storyMedia      String?
  storyMediaType  String?
  sampleRequested Boolean   @default(false)
  sampleShipped   Boolean   @default(false)
  shippingLabel   String?
  trustBadge      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Add Weekly Mission Completion tracking model
model WeeklyMissionCompletion {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userEmail   String // The user's email
  missionType String // Type of mission completed (product, invite, whatsapp)
  completedAt DateTime @default(now())
  weekNumber  Int // Week number of the year
  year        Int // Year of completion

  @@unique([userEmail, missionType, weekNumber, year], name: "unique_weekly_mission")
  @@index([userEmail])
  @@index([weekNumber, year])
}

model WalletDocuments {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  walletId      String   @unique
  noOfDocuments Int      @default(3)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Add new model for hotel check-ins
model HotelCheckin {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  whatsapp    String
  dob         DateTime
  address     String
  country     String
  bookingID   String
  hotelID     String
  hotelName   String
  entryDate   DateTime
  exitDate    DateTime
  noOfPerson  Int
  secureKey   String   @unique
  secureLink  String   @unique
  status      String   @default("Pending") // Pending or Checked-IN
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to User
  user        User     @relation(fields: [hotelID], references: [apiKey])
  @@index([hotelID])
}
