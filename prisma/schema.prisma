generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  designation     String?
  email           String    @unique
  phone           String?
  walletAddress   String?
  gstNumber       String    @default("")
  companyAddress  String    @default("")
  companyType     String    @default("")
  companyName     String    @default("")
  msmeCertificate String?
  oemCertificate  String?
  fy2324Data      String?
  fy2425Data      String?
  glltag          String?
  international   Boolean   @default(false)
  terms           Boolean   @default(true)
  isVerified      Boolean   @default(false)
  verificationOTP String?
  otpExpiry       DateTime?
  gllBalance      Float     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rewards Rewards[]

  // storeConnections  storeConnection[]
  // files             File[]
  // certificates      Certificate[]
  // msmeRegistrations MsmeRegistration[]
  // invoices          Invoice[]
  // msmeReferrals     MsmeReferral[]
  // businessStories   BusinessStory[]
  // products          Product[]
  // socialAccounts    SocialAccount[]
}

model Rewards {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  companyName   String
  financialYear String
  documentType  String
  document      String?
  notes         String?
  userEmail     String? // Store user email for easy reference
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Foreign Key relation to User
  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])
}

// model storeConnection {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   platform  String
//   storeUrl  String
//   storeId   String?
//   consented Boolean
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // Foreign Key
//   userId String? @db.ObjectId
//   user   User?   @relation(fields: [userId], references: [id])
// }

// model File {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   type      String
//   url       String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // Foreign Key
//   userId String? @db.ObjectId
//   user   User?   @relation(fields: [userId], references: [id])
// }

// // Certificate model for Card3
// model Certificate {
//   id              String   @id @default(auto()) @map("_id") @db.ObjectId
//   certificateType String
//   certificateUrl  String
//   expiryDate      DateTime
//   issueAuthority  String
//   notes           String
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt

//   // Foreign Key
//   userId String? @db.ObjectId
//   user   User?   @relation(fields: [userId], references: [id])
// }

// // MSME Registration model for Card4
// model MsmeRegistration {
//   id             String   @id @default(auto()) @map("_id") @db.ObjectId
//   businessName   String
//   gstin          String
//   businessType   String
//   city           String
//   state          String
//   certificateUrl String
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt

//   // Foreign Key
//   userId String? @db.ObjectId
//   user   User?   @relation(fields: [userId], references: [id])
// }

// // Invoice model for Card5
// model Invoice {
//   id            String   @id @default(auto()) @map("_id") @db.ObjectId
//   invoiceNumber String
//   amount        String
//   dueDate       DateTime
//   customerName  String
//   fileUrls      String[] // Array of file URLs
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt

//   // Foreign Key
//   userId String? @db.ObjectId
//   user   User?   @relation(fields: [userId], references: [id])
// }

// // MSME Referral model for Card6
// model MsmeReferral {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   uciNumber  String
//   msmeUciId  String
//   customerId String
//   city       String
//   state      String
//   status     String   @default("pending") // pending, completed
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   // Foreign Key
//   userId String? @db.ObjectId
//   user   User?   @relation(fields: [userId], references: [id])
// }

// // Business Story model for Card7
// model BusinessStory {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   imageUrl  String
//   story     String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // Foreign Key
//   userId String? @db.ObjectId
//   user   User?   @relation(fields: [userId], references: [id])
// }

// // Product model for Card8
// model Product {
//   id              String   @id @default(auto()) @map("_id") @db.ObjectId
//   productName     String
//   gstInNumber     String
//   uciCode         String
//   productCategory String
//   productMaterial String
//   originCountry   String
//   imageUrl        String
//   status          String   @default("pending") // pending, completed
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt

//   // Foreign Key
//   userId String? @db.ObjectId
//   user   User?   @relation(fields: [userId], references: [id])
// }

// // SocialAccount model for Card9
// model SocialAccount {
//   id        String           @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime         @default(now())
//   updatedAt DateTime         @updatedAt
//   platforms SocialPlatform[] // Relation to connected platforms

//   // Foreign Key
//   userId String? @db.ObjectId
//   user   User?   @relation(fields: [userId], references: [id])
// }

// // SocialPlatform model - linked to SocialAccount
// model SocialPlatform {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String // e.g., Facebook, Instagram, LinkedIn, Twitter
//   url       String // Platform URL or user handle
//   connected Boolean  @default(true)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // Relation to SocialAccount
//   socialAccountId String?        @db.ObjectId
//   socialAccount   SocialAccount? @relation(fields: [socialAccountId], references: [id])
// }
