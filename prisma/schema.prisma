generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  designation             String?
  email                   String    @unique
  phone                   String?
  walletAddress           String?
  accountName             String?   @default("")
  accountNumber           String?   @default("")
  ifscCode                String    @default("")
  gstNumber               String    @default("")
  companyAddress          String    @default("")
  companyType             String?   @default("")
  companyName             String    @default("")
  msmeCertificate         String?
  oemCertificate          String?
  fy2324Data              String?
  fy2425Data              String?
  glltag                  String?
  international           Boolean   @default(false)
  terms                   Boolean   @default(true)
  isVerified              Boolean   @default(false)
  verificationOTP         String?
  otpExpiry               DateTime?
  gllBalance              Float     @default(0)
  apiKey                  String?   @default("")
  bankName                String?   @default("")
  bankBranch              String?
  telegramId              String? // Telegram chat ID for the user
  notificationPreferences Json? // Store notification preferences as JSON
  lastInteraction         DateTime? // Last time user interacted with the bot
  securelinkscount        Int       @default(0) // Track number of secure links generated
  description             String?
  userPhotos              String[]  @default([])
  userVideos              String[]  @default([])

  // New fields for enhanced user profile
  socialMediaLink         String? // Step 2: Social profile
  passion                 String? // Step 2: User's passion/interest
  existingOnlineStoreLink String? // Step 2: Link to existing online store
  profilePicture          String? // Step 2: User's profile picture
  businessPhotos          String[] @default([]) // Step 3: Business photos
  businessVideo           String? // Step 3: Business video
  businessDescription     String? // Step 3: Business description
  paymentPreference       String? // Step 3: How they prefer to receive payments

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  rewards  Rewards[]      @relation("UserRewards")
  stores   Store[]        @relation("UserStores")
  checkins HotelCheckin[] // Relation to hotel check-ins
  sessions Session[]

  // storeConnections  storeConnection[]
  // files             File[]
  // certificates      Certificate[]
  // msmeRegistrations MsmeRegistration[]
  // invoices          Invoice[]
  // msmeReferrals     MsmeReferral[]
  // businessStories   BusinessStory[]
  // products          Product[]
  // socialAccounts    SocialAccount[]

  // @@index([apiKey], unique: true, sparse: true)
}

model Creator {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  username      String? @unique
  email         String  @unique
  phone         String?
  nationality   String?
  walletAddress String? // Add wallet address field for blockchain transactions
  glltag        String?
  terms         Boolean @default(false)

  // Instagram fields
  instagramId       String?
  instagramUsername String?
  profilePicture    String?

  // New fields replacing bank information
  passion                 String? // Creator's passion/interest
  existingOnlineStoreLink String? // Link to existing online store
  paymentPreference       String? // How they prefer to receive payments

  // Extended profile fields
  firstName          String?
  lastName           String?
  customCategory     String?
  customWorkType     String?
  hasBrandColors     Boolean? @default(false)
  hasLogo            Boolean? @default(false)
  selectedCategories String[] @default([])
  selectedWorkTypes  String[] @default([])
  connectedSocials   Json?
  userType           String?  @default("creator")

  // KYC and Registration status fields
  isKycComplete          Boolean   @default(false)
  kycCompletedAt         DateTime?
  isRegistrationComplete Boolean   @default(false)

  // Legacy fields (keeping for backward compatibility)
  bankBranch    String?
  bankName      String?
  accountNumber String?
  accountName   String?
  ifscCode      String?
  apiKey        String?
  aboutMe       String?

  // System fields
  gllBalance Float    @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userPhotos String[] @default([])
  userVideos String[] @default([])
}

model Rewards {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  companyName   String?
  financialYear String?
  documentType  String?
  document      String?
  notes         String?
  userEmail     String? // Store user email for easy reference

  // Store connection fields
  platform  String?
  storeUrl  String?
  storeId   String?
  consented Boolean? @default(false)

  // Certificate fields
  certificateType String?
  certificateUrl  String?
  expiryDate      DateTime?
  issueAuthority  String?

  // MSME Registration fields
  businessName String?
  gstin        String?
  businessType String?
  city         String?
  state        String?
  certificate  String? // Changed from certificateUrl to certificate to match route changes

  // Invoice fields
  invoiceNumber String?
  amount        String?
  dueDate       DateTime?
  customerName  String?
  fileUrls      String[]  @default([])

  // MSME Referral fields
  uciNumber  String?
  msmeUciId  String?
  customerId String?
  status     String? @default("pending")

  // Business Story fields
  imageUrl String?
  story    String?

  // Product fields
  productName     String?
  gstInNumber     String?
  uciCode         String?
  productCategory String?
  productMaterial String?
  originCountry   String?

  // Social Account fields
  socialPlatforms Json? // Store platform data as JSON

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Key relation to User
  userId String? @db.ObjectId
  user   User?   @relation("UserRewards", fields: [userId], references: [id])

  // Define an index on userEmail for faster lookups
  @@index([userEmail])
  @@index([userId])
}

// User Task Completion tracking model
model UserCompletedTask {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userEmail   String // The user's email as unique identifier
  taskId      String // The task identifier (e.g., 'card1', 'card2', etc.)
  completedAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Composite unique constraint to prevent duplicate entries
  @@unique([userEmail, taskId], name: "userEmail_taskId")
  // Add index for faster lookups by email
  @@index([userEmail])
}

model GGASeller {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  sellerType      String
  isVerified      Boolean   @default(false)
  verifiedAt      DateTime?
  aadharDoc       String?
  gstDoc          String?
  whatsappNumber  String?
  certificateUrl  String?
  products        Json[] // Each product object will include: {productName, productImage, description, productType, location, sellsOnline, addedAt}
  storeName       String?
  storeTagline    String?
  storeLogo       String?
  socialLinks     Json?
  storeUrl        String?
  storyMedia      String?
  storyMediaType  String?
  sampleRequested Boolean   @default(false)
  sampleShipped   Boolean   @default(false)
  shippingLabel   String?
  trustBadge      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Add Weekly Mission Completion tracking model
model WeeklyMissionCompletion {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userEmail   String // The user's email
  missionType String // Type of mission completed (product, invite, whatsapp)
  completedAt DateTime @default(now())
  weekNumber  Int // Week number of the year
  year        Int // Year of completion

  @@unique([userEmail, missionType, weekNumber, year], name: "unique_weekly_mission")
  @@index([userEmail])
  @@index([weekNumber, year])
}

// Storefront feature models
model Store {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  slug        String   @unique
  logoUrl     String?
  bannerUrl   String?
  walletId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[] @relation("StoreProducts")
  userId   String?   @db.ObjectId
  user     User?     @relation("UserStores", fields: [userId], references: [id])

  @@index([walletId])
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  category    String?
  imageUrls   String[] @default([])
  inStock     Boolean  @default(true)
  sku         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  storeId String @db.ObjectId
  store   Store  @relation("StoreProducts", fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
  @@index([category])
}

// Excel Processing feature models
model ExcelDocument {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  fileName  String
  fileKey   String     @unique
  s3Url     String?
  status    String     @default("pending") // pending, processing, completed, error
  progress  Int        @default(0)
  error     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  rows      ExcelRow[]
}

model ExcelRow {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  documentId String        @db.ObjectId
  document   ExcelDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  content    String
  embedding  Json // Stored as array in MongoDB
  rowData    Json
  rowIndex   Int
  metadata   Json?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  // Note: Vector search index will be created manually in MongoDB Atlas
  // using the following command:
  // db.ExcelRow.createIndex({ embedding: "vector" }, { 
  //   name: "vector_search_index",
  //   vectorSearchOptions: { numDimensions: 1536 }
  // })

  @@index([documentId])
}

model WalletDocuments {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  walletId      String   @unique
  noOfDocuments Int      @default(3)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Add new model for hotel check-ins
model HotelCheckin {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String
  whatsapp   String
  dob        DateTime
  address    String
  country    String
  bookingID  String
  hotelID    String
  hotelName  String
  entryDate  DateTime
  exitDate   DateTime
  noOfPerson Int
  secureKey  String   @unique
  secureLink String   @unique
  status     String   @default("Pending") // Pending or Checked-IN
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation to User
  // user User @relation(fields: [hotelID], references: [apiKey])
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  @@index([hotelID])
}

// Add new model for tracking airdrop claims
model AirdropClaim {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String?
  walletAddress     String
  rewardAmount      Float
  rewardSource      String // 'excel_airdrop' or 'default_reward'
  foundInAirdrop    Boolean  @default(false)
  userType          String // 'user' or 'creator'
  blockchainTxHash  String? // Store blockchain transaction hash if available
  blockchainSuccess Boolean  @default(false)
  claimedAt         DateTime @default(now())

  // Track if claim was from Excel or default
  excelRowData Json? // Store the original Excel data if found

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([walletAddress]) // Ensure one claim per wallet address
  @@unique([email]) // Ensure one claim per email (if provided)
  @@index([claimedAt])
}

// Add new model for creator posts
model CreatorPost {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  postId          String   @unique // External post ID from frontend
  content         String
  username        String
  user_username   String? // User's actual username (different from display name)
  userEmail       String? // User's email for easier querying
  profilePicture  String?
  timestamp       DateTime
  images          String[] @default([]) // Array of image URLs
  videos          String[] @default([]) // Array of video URLs
  transactionHash String? // Blockchain transaction hash for rewards
  rewardAmount    Float? // Amount of GLL rewarded for this post
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations for likes and comments
  likes    PostLike[]
  comments Comment[]

  @@index([timestamp])
}

// Post Likes Table
model PostLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post CreatorPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, username], name: "postId_username")
  @@index([postId])
  @@index([username])
}

// Comments Table
model Comment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  postId         String   @db.ObjectId
  username       String
  profilePicture String
  content        String
  timestamp      DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  post  CreatorPost   @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes CommentLike[]

  @@index([postId])
  @@index([username])
}

// Comment Likes Table
model CommentLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  commentId String   @db.ObjectId
  username  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([commentId, username], name: "commentId_username")
  @@index([commentId])
  @@index([username])
}

// Creator Services model
model CreatorService {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  email                String // Creator's email
  title                String // Service title
  description          String // Service description (max 40 chars)
  price                String // Service price
  status               String   @default("available") // available, busy, unavailable
  icon                 String   @default("bi-briefcase") // Bootstrap icon class
  proofOfCreationScore Float? // Proof of creation score
  transactionHash      String? // Blockchain transaction hash for rewards
  rewardAmount         Float? // Amount of GLL rewarded for this service
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Index for faster queries
  @@index([email])
  @@map("creatorServices")
}

// Gateway schema

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Session {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String        @db.ObjectId
  successUrl     String
  cancelUrl      String
  metadata       Json
  paymentStatus  PaymentStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  txHash         String?
  paymentDate    DateTime?
  paymentThrough String? // e.g., "Stripe", "PayPal", etc. 
  amountPaid     Float? // Total amount paid in the session 

  user      User             @relation(fields: [userId], references: [id])
  lineItems LineItem[]
  checkout  CheckoutSession? @relation("CheckoutSession")
}

model LineItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionId String   @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  session   Session    @relation(fields: [sessionId], references: [id])
  priceData PriceData? @relation("LineItemPriceData")
}

model PriceData {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  unitAmount Float
  currency   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lineItemId String   @unique @db.ObjectId // unique for one-to-one
  lineItem   LineItem @relation("LineItemPriceData", fields: [lineItemId], references: [id])

  productData ProductData? @relation("ProductDataPriceData")
}

model ProductData {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  images      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  priceDataId String    @unique @db.ObjectId
  priceData   PriceData @relation("ProductDataPriceData", fields: [priceDataId], references: [id])
}

model CheckoutSession {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionId   String   @unique @db.ObjectId
  amountTotal Float
  currency    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  session Session @relation("CheckoutSession", fields: [sessionId], references: [id])
}

model CreatorProduct {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  email                String // Creator's email
  title                String // Product title (max 100 chars)
  description          String // Product description (max 200 chars)
  price                String // Product price
  status               String   @default("available") // available, sold, unavailable
  category             String   @default("general") // Product category
  tags                 String[] @default([]) // Array of tags
  images               String[] @default([]) // Array of S3 image URLs
  proofOfCreationScore Float? // Proof of creation score
  transactionHash      String? // Blockchain transaction hash for rewards
  rewardAmount         Float? // Amount of GLL rewarded for this product
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Index for faster queries
  @@index([email])
  @@index([category])
  @@index([status])
  @@map("creatorProducts")
}

// Creator Courses model
model CreatorCourse {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  email                String // Creator's email
  title                String // Course title (max 100 chars)
  description          String // Course description (max 500 chars)
  courseImage          String? // Course image URL from S3
  price                String? // Course price (can be static or range like "$50-$100")
  priceType            String   @default("static") // static, range, flexible
  minPrice             Float? // Minimum price for range pricing
  maxPrice             Float? // Maximum price for range pricing
  status               String   @default("available") // available, sold, unavailable
  category             String   @default("general") // Course category
  tags                 String[] @default([]) // Array of tags
  proofOfCreationScore Float? // Proof of creation score
  transactionHash      String? // Blockchain transaction hash for rewards
  rewardAmount         Float? // Amount of GLL rewarded for this course
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Index for faster queries
  @@index([email])
  @@index([category])
  @@index([status])
  @@index([priceType])
  @@map("creatorCourses")
}

// Creator Task3 Reward tracking model
model CreatorTask3Reward {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String   @unique
  rewardAmount    Float
  transactionHash String?
  walletAddress   String?
  claimedAt       DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([claimedAt])
}

// Creator Task4 data model
model CreatorTask4Data {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String
  type            String
  customerClient  String
  fileUrl         String
  rewardAmount    Float
  transactionHash String?
  walletAddress   String?
  completedAt     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([email])
  @@index([completedAt])
}

// Creator Task5 data model
model CreatorTask5Data {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  email              String
  customerName       String
  format             String
  testimonial        String? // null for video/audio
  testimonialFileUrl String? // null for text
  rewardAmount       Float
  transactionHash    String?
  walletAddress      String?
  completedAt        DateTime @default(now())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([email])
  @@index([completedAt])
}

// Game High Scores model
model GameHighScore {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  gameName    String   @map("game_name")
  score       Int
  playerName  String   @map("player_name")
  playerEmail String   @map("player_email")
  timestamp   BigInt
  date        String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([gameName])
  @@index([playerEmail])
  @@index([score(sort: Desc)])
  @@index([gameName, playerEmail])
  @@map("game_high_scores")
}

// Order Status enum
enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

// Payment session tracking model
model PaymentSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionId String   @unique // Payment gateway session ID
  amount    Float
  currency  String   @default("USD")
  status    String   @default("PENDING") // PENDING, COMPLETED, FAILED
  metadata  Json // Store all session metadata including item and user details
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
  @@map("payment_sessions")
}

// Order tracking model for purchase/sale history
model Order {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String  @unique // Unique order identifier
  sessionId       String  @unique // Payment session ID
  transactionHash String? // Blockchain transaction hash (if applicable)

  // Product/Service/Course details
  itemId          String // Product/Service/Course ID
  itemType        String // "product", "service", or "course"
  itemTitle       String
  itemDescription String?
  itemPrice       Float
  itemCurrency    String  @default("USD")

  // Buyer information
  buyerEmail         String
  buyerName          String?
  buyerWalletAddress String?

  // Seller information
  sellerEmail         String
  sellerName          String?
  sellerWalletAddress String?

  // Order details
  quantity    Int         @default(1)
  totalAmount Float
  status      OrderStatus @default(PENDING)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  // Metadata
  metadata Json? // Store additional data like product images, etc.

  @@index([buyerEmail])
  @@index([sellerEmail])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

// Campaign Leads model
model LeadsCampaign {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  campaignId String    @map("campaign_id")
  people     Json[]    @default([]) // Array of people objects
  createdAt  DateTime? // Made optional to handle existing data
  updatedAt  DateTime? // Made optional to handle existing data

  @@index([campaignId])
  @@map("leads-campaign")
}
